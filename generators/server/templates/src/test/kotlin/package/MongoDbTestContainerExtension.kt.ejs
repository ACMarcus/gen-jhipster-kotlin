package <%= packageName %>

import java.util.Collections

import org.junit.jupiter.api.extension.BeforeAllCallback
import org.junit.jupiter.api.extension.ExtensionContext
import org.testcontainers.containers.MongoDBContainer
import org.testcontainers.utility.DockerImageName
import kotlin.math.roundToLong

class MongoDbTestContainerExtension: BeforeAllCallback {
    <%_ /* TODO, the smallest configuration that lead to only one error for webflux-gw-jwt was 0.6 RAM /0.8 SWAP/0.1 nanocore */ _%>
    private val THREAD_CONTAINER = ThreadLocal<MongoDBContainer>()
        private val memoryInBytes = (1024 * 1024 * 1024 * 0.6).roundToLong()
        private val memorySwapInBytes = (1024 * 1024 * 1024 * 0.8).roundToLong()
        private val nanoCpu = (1_000_000_000L * 0.1).roundToLong()
    
        override fun beforeAll(context: ExtensionContext) {
            if (null == THREAD_CONTAINER.get()) {
                val mongoDBContainer = MongoDBContainer(DockerImageName.parse("mongo:4.4.11"))
                    .withReuse(true)
                    .withTmpFs(Collections.singletonMap("/testtmpfs", "rw"))
                    .withCommand("--nojournal --wiredTigerCacheSizeGB 0.25 --wiredTigerCollectionBlockCompressor none --slowOpSampleRate 0 --setParameter ttlMonitorEnabled=false --setParameter diagnosticDataCollectionEnabled=false --setParameter logicalSessionRefreshMillis=6000000 --setParameter enableFlowControl=false --setParameter oplogFetcherUsesExhaust=false --setParameter disableResumableRangeDeleter=true --setParameter enableShardedIndexConsistencyCheck=false --setParameter enableFinerGrainedCatalogCacheRefresh=false --setParameter readHedgingMode=off --setParameter loadRoutingTableOnStartup=false --setParameter rangeDeleterBatchDelayMS=2000000 --setParameter skipShardingConfigurationChecks=true --setParameter syncdelay=3600")
                    .withCreateContainerCmdModifier { cmd ->
                        cmd.hostConfig!!
                            .withMemory(memoryInBytes)
                            .withMemorySwap(memorySwapInBytes)
                            .withNanoCPUs(nanoCpu)
                    }
                mongoDBContainer.start()
                THREAD_CONTAINER.set(mongoDBContainer)
            }
        }
    
        fun getThreadContainer() = THREAD_CONTAINER
}
