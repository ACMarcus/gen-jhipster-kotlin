<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import <%=packageName%>.security.OAuth2AuthenticationSuccessHandler

import org.apache.commons.lang3.StringUtils
import org.slf4j.LoggerFactory
import org.springframework.beans.BeansException
import org.springframework.beans.factory.config.BeanPostProcessor
import org.springframework.boot.web.servlet.FilterRegistrationBean
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Profile
import org.springframework.core.Ordered
import org.springframework.core.PriorityOrdered
import org.springframework.security.oauth2.client.filter.OAuth2ClientAuthenticationProcessingFilter
import org.springframework.security.web.FilterChainProxy
import org.springframework.web.filter.OncePerRequestFilter

import javax.servlet.FilterChain
import javax.servlet.ServletException
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse
import java.io.IOException

/**
 * Development only configuration that is Browsersync-aware and redirects to the origin you clicked "login" from.
 * If you split your application into client and server on separate domains, you might want to enable this for prod
 * mode too.
 */
@Configuration
@Profile("dev")
class OAuth2Configuration {

    private val log = LoggerFactory.getLogger(OAuth2Configuration::class.java)

    @Bean
    fun saveLoginOriginFilter(): FilterRegistrationBean<OncePerRequestFilter> {
        val filter = object : OncePerRequestFilter() {
            @Throws(ServletException::class, IOException::class)
            override fun doFilterInternal(request: HttpServletRequest, response: HttpServletResponse,
                                          filterChain: FilterChain) {
                if (request.remoteUser == null && request.requestURI.endsWith("/login")) {
                    val referrer = request.getHeader("referer")
                    if (!StringUtils.isBlank(referrer) && request.session.getAttribute(SAVED_LOGIN_ORIGIN_URI) == null) {
                        log.debug("Saving login origin URI: {}", referrer)
                        request.session.setAttribute(SAVED_LOGIN_ORIGIN_URI, referrer)
                    }
                }
                filterChain.doFilter(request, response)
            }
        }
        val bean = FilterRegistrationBean<OncePerRequestFilter>(filter)
        bean.order = Ordered.HIGHEST_PRECEDENCE
        return bean
    }

    class DefaultRolesPrefixPostProcessor : BeanPostProcessor, PriorityOrdered {

        @Throws(BeansException::class)
        override fun postProcessAfterInitialization(bean: Any, beanName: String?): Any? {
            if (bean is FilterChainProxy) {

                for (chain in bean.filterChains) {
                    for (filter in chain.filters) {
                        if (filter is OAuth2ClientAuthenticationProcessingFilter) {
                            filter.setAuthenticationSuccessHandler(OAuth2AuthenticationSuccessHandler())
                        }
                    }
                }
            }
            return bean
        }

        @Throws(BeansException::class)
        override fun postProcessBeforeInitialization(bean: Any, beanName: String?): Any? {
            return bean
        }

        override fun getOrder(): Int {
            return PriorityOrdered.HIGHEST_PRECEDENCE
        }
    }

    companion object {
        @JvmField
        val SAVED_LOGIN_ORIGIN_URI = "${OAuth2Configuration::class.java.name}_SAVED_ORIGIN"

        @Bean
        fun defaultRolesPrefixPostProcessor(): DefaultRolesPrefixPostProcessor {
            return DefaultRolesPrefixPostProcessor()
        }
    }
}
