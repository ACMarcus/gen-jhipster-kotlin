<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import io.github.jhipster.config.JHipsterProperties

import com.codahale.metrics.MetricRegistry
import com.codahale.metrics.Slf4jReporter
import com.codahale.metrics.health.HealthCheckRegistry
<%_ if (['ehcache', 'infinispan'].includes(cacheProvider)) { _%>
import com.codahale.metrics.jcache.JCacheGaugeSet
<%_ } _%>
import com.codahale.metrics.jmx.*
import com.codahale.metrics.jvm.*
import com.ryantenney.metrics.spring.config.annotation.EnableMetrics
import com.ryantenney.metrics.spring.config.annotation.MetricsConfigurerAdapter
<%_ if (databaseType === 'sql') { _%>
import com.zaxxer.hikari.HikariDataSource
<%_ } _%>
import io.prometheus.client.CollectorRegistry
import io.prometheus.client.dropwizard.DropwizardExports
import io.prometheus.client.exporter.MetricsServlet
import org.slf4j.LoggerFactory
import org.slf4j.MarkerFactory
<%_ if (databaseType === 'sql') { _%>
import org.springframework.beans.factory.annotation.Autowired
<%_ } _%>
import org.springframework.beans.factory.InitializingBean
import org.springframework.boot.web.servlet.ServletContextInitializer
<%_ if (['ehcache', 'infinispan'].includes(cacheProvider)) { _%>
import org.springframework.cache.CacheManager
<%_ } _%>
import org.springframework.context.annotation.*

import javax.servlet.ServletContext
import java.lang.management.ManagementFactory
import java.util.concurrent.TimeUnit

@Configuration
@EnableMetrics(proxyTargetClass = true)
/**
 * The cacheManager is injected here to force its initialization, so the [JCacheGaugeSet] will be correctly created below.
 */
constructor(private val jHipsterProperties: JHipsterProperties, cacheManager: CacheManager
) : MetricsConfigurerAdapter(), InitializingBean, ServletContextInitializer {

    private val log = LoggerFactory.getLogger(MetricsConfiguration::class.java)

    private val metricRegistry = MetricRegistry()

    private val healthCheckRegistry = HealthCheckRegistry()

<%_ if (databaseType === 'sql') { _%>

    private HikariDataSource hikariDataSource
<%_ } _%>

<%_ if (['ehcache', 'infinispan'].includes(cacheProvider)) { _%>
    // The cacheManager is injected here to force its initialization, so the JCacheGaugeSet
    // will be correctly created below.
<%_ } _%>
    public MetricsConfiguration(JHipsterProperties jHipsterProperties<% if (['ehcache', 'infinispan'].includes(cacheProvider)) { %>, CacheManager cacheManager<% } %>) {
        this.jHipsterProperties = jHipsterProperties
    }
<%_ if (databaseType === 'sql') { _%>

    @Autowired(required = false)
    public void setHikariDataSource(HikariDataSource hikariDataSource) {
        this.hikariDataSource = hikariDataSource
    }
<%_ } _%>

    @Bean
    override fun getMetricRegistry(): MetricRegistry {
        return metricRegistry
    }

    @Bean
    override fun getHealthCheckRegistry(): HealthCheckRegistry {
        return healthCheckRegistry
    }

    @Throws(Exception::class)
    override fun afterPropertiesSet() {
        log.debug("Registering JVM gauges")
        metricRegistry.register(PROP_METRIC_REG_JVM_MEMORY, MemoryUsageGaugeSet())
        metricRegistry.register(PROP_METRIC_REG_JVM_GARBAGE, GarbageCollectorMetricSet())
        metricRegistry.register(PROP_METRIC_REG_JVM_THREADS, ThreadStatesGaugeSet())
        metricRegistry.register(PROP_METRIC_REG_JVM_FILES, FileDescriptorRatioGauge())
        metricRegistry.register(PROP_METRIC_REG_JVM_BUFFERS, BufferPoolMetricSet(ManagementFactory.getPlatformMBeanServer()))
        metricRegistry.register(PROP_METRIC_REG_JVM_ATTRIBUTE_SET, JvmAttributeGaugeSet())
        <%_ if (['ehcache', 'infinispan'].includes(cacheProvider)) { _%>
        metricRegistry.register(PROP_METRIC_REG_JCACHE_STATISTICS, JCacheGaugeSet())
        <%_ } _%>
        <%_ if (databaseType === 'sql') { _%>
        if (hikariDataSource != null) {
            log.debug("Monitoring the datasource")
            // remove the factory created by HikariDataSourceMetricsPostProcessor until JHipster migrate to Micrometer
            hikariDataSource.metricsTrackerFactory = null
            hikariDataSource.metricRegistry = metricRegistry
        }
        <%_ } _%>
        if (jHipsterProperties.metrics.jmx.isEnabled) {
            log.debug("Initializing Metrics JMX reporting")
            val jmxReporter = JmxReporter.forRegistry(metricRegistry).build()
            jmxReporter.start()
        }
        if (jHipsterProperties.metrics.logs.isEnabled) {
            log.info("Initializing Metrics Log reporting")
            val metricsMarker = MarkerFactory.getMarker("metrics")
            val reporter = Slf4jReporter.forRegistry(metricRegistry)
                .outputTo(LoggerFactory.getLogger("metrics"))
                .markWith(metricsMarker)
                .convertRatesTo(TimeUnit.SECONDS)
                .convertDurationsTo(TimeUnit.MILLISECONDS)
                .build()
            reporter.start(jHipsterProperties.metrics.logs.reportFrequency, TimeUnit.SECONDS)
        }
    }

    override fun onStartup(servletContext: ServletContext) {

        if (jHipsterProperties.metrics.prometheus.isEnabled) {
            val endpoint = jHipsterProperties.metrics.prometheus.endpoint

            log.debug("Initializing prometheus metrics exporting via {}", endpoint)

            CollectorRegistry.defaultRegistry.register(DropwizardExports(metricRegistry))
            servletContext
                .addServlet("prometheusMetrics", MetricsServlet(CollectorRegistry.defaultRegistry))
                .addMapping(endpoint)
        }
    }

    companion object {

        private const val PROP_METRIC_REG_JVM_MEMORY = "jvm.memory"
        private const val PROP_METRIC_REG_JVM_GARBAGE = "jvm.garbage"
        private const val PROP_METRIC_REG_JVM_THREADS = "jvm.threads"
        private const val PROP_METRIC_REG_JVM_FILES = "jvm.files"
        private const val PROP_METRIC_REG_JVM_BUFFERS = "jvm.buffers"
        private const val PROP_METRIC_REG_JVM_ATTRIBUTE_SET = "jvm.attributes"
<% if (['ehcache', 'infinispan'].includes(cacheProvider)) { %>
        private const val PROP_METRIC_REG_JCACHE_STATISTICS = "jcache.statistics"
<%_ } _%>

    }
}
