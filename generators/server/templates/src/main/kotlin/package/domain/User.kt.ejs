<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.domain

import <%=packageName%>.config.Constants
<% if (databaseType === 'cassandra') { %>
import com.datastax.driver.mapping.annotations.*<% } %>
import com.fasterxml.jackson.annotation.JsonIgnore<% if (databaseType === 'sql') { %>
import org.hibernate.annotations.BatchSize<% } %><% if (enableHibernateCache) { %>
import org.hibernate.annotations.Cache
import org.hibernate.annotations.CacheConcurrencyStrategy<% } %>
import javax.validation.constraints.Email
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.index.Indexed
import org.springframework.data.mongodb.core.mapping.Field
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
import org.springframework.data.annotation.Id
import com.couchbase.client.java.repository.annotation.Field
import org.springframework.data.couchbase.core.mapping.Document
import org.springframework.data.couchbase.core.mapping.id.GeneratedValue
import org.springframework.data.couchbase.core.mapping.id.IdAttribute
import org.springframework.data.couchbase.core.mapping.id.IdPrefix
<%_ } _%>

<%_ if (databaseType === 'sql') { _%>
import javax.persistence.*
<%_ } _%>
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import java.io.Serializable
import java.util.Locale
import java.util.Objects
import java.time.Instant

<%_ if (databaseType === 'couchbase') { _%>
import <%=packageName%>.config.Constants.ID_DELIMITER
import org.springframework.data.couchbase.core.mapping.id.GenerationStrategy.USE_ATTRIBUTES

<%_ } _%>
/**
 * A user.
 */<% if (databaseType === 'sql') { %>
@Entity
@Table(name = "<%= jhiTablePrefix %>_user")<% } %>
<%_ if (enableHibernateCache) { if (cacheProvider === 'infinispan') { _%>
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE) <%_ } else { _%>
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE) <%_ } } _%><% if (databaseType === 'mongodb') { %>
@org.springframework.data.mongodb.core.mapping.Document(collection = "<%= jhiTablePrefix %>_user")<% } %><% if (databaseType === 'couchbase') { %>
@Document<% } %><% if (databaseType === 'cassandra') { %>
@Table(name = "user")<% } %><% if (searchEngine === 'elasticsearch') { %>
@org.springframework.data.elasticsearch.annotations.Document(indexName = "user")<% } %>
class <%= asEntity('User') %> @JvmOverloads constructor(
<%_ if (databaseType === 'sql') { _%>

    @Id
    <%_ if (authenticationType !== 'oauth2' && (prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb')) { _%>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    <%_ } else if (authenticationType !== 'oauth2') { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    <%_ } _%>
    var id: <% if (authenticationType === 'oauth2') { %>String?<% } else { %>Long?<% } %> = null,
<%_ } else { _%>
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>

    @Id<% } %><% if (databaseType === 'couchbase') { %>
    @GeneratedValue(strategy = USE_ATTRIBUTES, delimiter = ID_DELIMITER)<% } %><% if (databaseType === 'cassandra') { %>
    @PartitionKey<% } %>
    var id: String? = null,
<%_ } _%>

    login: String? = null,
<%_ if (authenticationType !== 'oauth2') { _%>

    @JsonIgnore
    @field:NotNull
    @field:Size(min = 60, max = 60)<% if (databaseType === 'sql') { %>
    @Column(name = "password_hash", length = 60, nullable = false)<% } %>
    var password: String? = null,
<%_ } _%>

    @field:Size(max = 50)<% if (databaseType === 'sql') { %>
    @Column(name = "first_name", length = 50)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Field("first_name")<% } %>
    var firstName: String? = null,

    @field:Size(max = 50)<% if (databaseType === 'sql') { %>
    @Column(name = "last_name", length = 50)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Field("last_name")<% } %>
    var lastName: String? = null,

    @field:Email
    @field:Size(min = 5, max = 254)<% if (databaseType === 'sql') { %>
    @Column(length = 254, unique = true)<% } %><% if (databaseType === 'mongodb') { %>
    @Indexed<% } %>
    var email: String? = null,

<%_ if (databaseType === 'sql') { _%>
    @field:NotNull
    @Column(nullable = false)
<%_ } _%>
    var activated: Boolean = false,

    @field:Size(min = 2, max = 6)<% if (databaseType === 'sql') { %>
    @Column(name = "lang_key", length = 6)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Field("lang_key")<% } %><% if (databaseType === 'cassandra') { %>
    @Column(name = "lang_key")<% } %>
    var langKey: String? = null,
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase' || databaseType === 'sql') { _%>

    @field:Size(max = 256)<% if (databaseType === 'sql') { %>
    @Column(name = "image_url", length = 256)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Field("image_url")<% } %>
    var imageUrl: String? = null,
    <%_ } _%>
<%_ if (authenticationType !== 'oauth2') { _%>

    @field:Size(max = 20)<% if (databaseType === 'sql') { %>
    @Column(name = "activation_key", length = 20)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Field("activation_key")<% } %><% if (databaseType === 'cassandra') { %>
    @Column(name = "activation_key")<% } %>
    @JsonIgnore
    var activationKey: String? = null,

    @field:Size(max = 20)<% if (databaseType === 'sql') { %>
    @Column(name = "reset_key", length = 20)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Field("reset_key")<% } %><% if (databaseType === 'cassandra') { %>
    @Column(name = "reset_key")<% } %>
    @JsonIgnore
    var resetKey: String? = null,

    <%_ if (databaseType === 'sql' || databaseType === 'cassandra') { _%>
    @Column(name = "reset_date")
    <%_ } else if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("reset_date")
    <%_ } _%>
    var resetDate: Instant? = null,
<%_ } _%>

    @JsonIgnore<% if (databaseType === 'sql') { %>
    @ManyToMany
    @JoinTable(
        name = "<%= jhiTablePrefix %>_user_authority",
        joinColumns = [JoinColumn(name = "user_id", referencedColumnName = "id")],
        inverseJoinColumns = [JoinColumn(name = "authority_name", referencedColumnName = "name")])
    <%_ if (enableHibernateCache) { if (cacheProvider === 'infinispan') { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE) <%_ } else { _%>
    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE) <%_ } } _%><% if (databaseType === 'sql') { %>
    @BatchSize(size = 20)<% } %><% } %><% if (databaseType === 'sql' || databaseType === 'mongodb') { %>
    var authorities: MutableSet<Authority> = mutableSetOf(),<% } %><% if (databaseType === 'cassandra' || databaseType === 'couchbase') { %>
    var authorities: MutableSet<String> = mutableSetOf()<% } if (databaseType === 'couchbase') { %>,<% } if (authenticationType === 'session' && databaseType === 'sql') { %>

    @JsonIgnore
    @OneToMany(cascade = [CascadeType.ALL], orphanRemoval = true, mappedBy = "user")
    <%_ if (enableHibernateCache) { if (cacheProvider === 'infinispan') { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    <%_ } else { _%>
    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
    <%_ } } _%>
    var persistentTokens: MutableSet<PersistentToken> = mutableSetOf(),<% } %>
<%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase') { _%>

    createdBy: String? = null, createdDate: Instant? = Instant.now(), lastModifiedBy: String? = null, lastModifiedDate: Instant? = Instant.now()
<%_ } _%>
) : <% if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase') { %>AbstractAuditingEntity(createdBy, createdDate, lastModifiedBy, lastModifiedDate), <% } %>Serializable {
<%_ if (databaseType === 'couchbase') { _%>

    @IdPrefix
    private val prefix: String = PREFIX
<%_ } _%>

    @NotNull
    @field:Pattern(regexp = Constants.LOGIN_REGEX)
    @field:Size(min = 1, max = 50)<% if (databaseType === 'sql') { %>
    @Column(length = 50, unique = true, nullable = false)<% } %><% if (databaseType === 'mongodb') { %>
    @Indexed<% } %><% if (databaseType === 'couchbase') { %>
    @IdAttribute<% } %>
    var login: String? = login
    set(value) {
        // Lowercase the login before saving it in database
        field = value?.toLowerCase(Locale.ENGLISH)
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is <%= asEntity('User') %>) return false
        if (other.id == null || id == null) return false

        return Objects.equals(id, other.id)
    }

    override fun hashCode(): Int {
        return 31
    }

    override fun toString(): String {
        return "<%= asEntity('User') %>{" +
            "login='" + login + '\'' +
            ", firstName='" + firstName + '\'' +
            ", lastName='" + lastName + '\'' +
            ", email='" + email + '\'' +<% if (databaseType === 'mongodb' || databaseType === 'couchbase' || databaseType === 'sql') { %>
            ", imageUrl='" + imageUrl + '\'' +<% } %>
            ", activated='" + activated + '\'' +
            ", langKey='" + langKey + '\'' +
            <%_ if (authenticationType !== 'oauth2') { _%>
            ", activationKey='" + activationKey + '\'' +
            <%_ } _%>
            "}"
    }

    companion object {
        private const val serialVersionUID = 1L
        <%_ if (databaseType === 'couchbase') { _%>

        const val PREFIX = "user"
        <%_ } _%>
    }

}
