<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest

import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory
import org.springframework.http.ResponseEntity
import org.springframework.security.core.Authentication
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RestController

import javax.servlet.http.HttpServletRequest

/**
 * REST controller for managing global OIDC logout.
 */
@RestController
class LogoutResource(
    private val templateFactory: UserInfoRestTemplateFactory,
    @param:Value("\${security.oauth2.client.access-token-uri}") private val accessTokenUri: String
) {

    private val log: Logger = LoggerFactory.getLogger(LogoutResource::class.java)

    /**
     * `POST  /api/logout` : logout the current user.
     *
     * @param request the [HttpServletRequest].
     * @param authentication the authentication token.
     * @return the [ResponseEntity] with status `200 (OK)` and a body with a global logout URL and ID token.
     */
    @PostMapping("/api/logout")
    fun logout(request: HttpServletRequest, authentication: Authentication): ResponseEntity<*> {
        log.debug("REST request to logout User : {}", authentication)
        val oauth2RestTemplate = this.templateFactory.userInfoRestTemplate
        val idToken = oauth2RestTemplate.accessToken.additionalInformation["id_token"] as String

        val logoutUrl = accessTokenUri.replace("token", "logout")
        val logoutDetails = mutableMapOf<String, String>()
        logoutDetails["logoutUrl"] = logoutUrl
        logoutDetails["idToken"] = idToken
        request.session.invalidate()
        return ResponseEntity.ok().body(logoutDetails)
    }
}
