<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config.couchbase

import com.couchbase.client.java.query.QueryScanConsistency
import org.springframework.data.couchbase.core.CouchbaseOperations
import org.springframework.data.couchbase.core.ExecutableFindByQueryOperation
import org.springframework.data.couchbase.core.query.Query
import org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod
import org.springframework.data.couchbase.repository.query.ReactiveN1qlRepositoryQueryExecutor
import org.springframework.data.couchbase.repository.query.StringN1qlQueryCreator
import org.springframework.data.repository.core.NamedQueries
import org.springframework.data.repository.query.ParameterAccessor
import org.springframework.data.repository.query.ParametersParameterAccessor
import org.springframework.data.repository.query.QueryMethodEvaluationContextProvider
import org.springframework.data.repository.query.parser.PartTree
import org.springframework.expression.spel.standard.SpelExpressionParser

class CustomN1qlRepositoryQueryExecutor(
    private val operations: CouchbaseOperations,
    private val queryMethod: CouchbaseQueryMethod,
    private val namedQueries: NamedQueries
){

    /**
     * see also {@link ReactiveN1qlRepositoryQueryExecutor#execute(Object[] parameters) execute }
     *
     * @param parameters substitute values
     * @return with data
     */
    fun execute(val parameters: Any[]): Any {
        val domainClass = queryMethod.getResultProcessor().getReturnedType().getDomainType()
        val accessor = new ParametersParameterAccessor(queryMethod.getParameters(), parameters)

        // this is identical to ReactiveN1qlRespositoryQueryExecutor,
        // except for the type of 'q', and the call to oneValue() vs one()
        var query: StringN1qlQueryCreator?
        var q: ExecutableFindByQueryOperation.ExecutableFindByQuery?
        if (queryMethod.hasN1qlAnnotation()) {
            query =
                StringN1qlQueryCreator(
                    accessor,
                    queryMethod,
                    operations.getConverter(),
                    operations.getBucketName(),
                    SpelExpressionParser(),
                    QueryMethodEvaluationContextProvider.DEFAULT,
                    namedQueries
                )
                    .createQuery()
        } else {
            val tree = PartTree(queryMethod.getName(), domainClass)
            query = CustomN1qlQueryCreator(operations, tree, accessor, queryMethod, operations.getConverter()).createQuery()
        }
        q =
            operations
                .findByQuery(domainClass)
                .consistentWith(buildQueryScanConsistency())
                .matching(query) as (ExecutableFindByQueryOperation.ExecutableFindByQuery) 
        if (queryMethod.isCountQuery()) {
            return q.count()
        } else if (queryMethod.isCollectionQuery()) {
            return q.all()
        } else {
            return q.oneValue()
        }
    }

    private fun buildQueryScanConsistency(): QueryScanConsistency {
        var scanConsistency = QueryScanConsistency.NOT_BOUNDED
        if (queryMethod.hasConsistencyAnnotation()) {
            scanConsistency = queryMethod.getConsistencyAnnotation().value()
        } else if (queryMethod.hasScanConsistencyAnnotation()) {
            scanConsistency = queryMethod.getScanConsistencyAnnotation().query()
        }
        return scanConsistency
    }
}
