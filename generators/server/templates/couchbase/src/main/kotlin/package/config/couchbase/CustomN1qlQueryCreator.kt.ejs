<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config.couchbase

import static org.springframework.data.couchbase.core.query.N1QLExpression.*

import java.util.Iterator
import org.springframework.core.convert.converter.Converter
import org.springframework.data.couchbase.core.CouchbaseOperations
import org.springframework.data.couchbase.core.convert.CouchbaseConverter
import org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty
import org.springframework.data.couchbase.core.query.Query
import org.springframework.data.couchbase.core.query.QueryCriteria
import org.springframework.data.domain.Sort
import org.springframework.data.mapping.PersistentPropertyPath
import org.springframework.data.mapping.context.MappingContext
import org.springframework.data.repository.query.ParameterAccessor
import org.springframework.data.repository.query.QueryMethod
import org.springframework.data.repository.query.parser.AbstractQueryCreator
import org.springframework.data.repository.query.parser.Part
import org.springframework.data.repository.query.parser.PartTree

class CustomN1qlQueryCreator(
    private val operations: CouchbaseOperations,
    private val tree: PartTree,
    private val accessor: ParameterAccessor,
    queryMethod: QueryMethod,
    converter: CouchbaseConverter
): AbstractQueryCreator<Query, QueryCriteria>(tree, accessor) {

    static Converter<? super CouchbasePersistentProperty, String> cvtr = source ->
        StringBuilder(source.getFieldName().length() + 2).append('`').append(source.getFieldName()).append('`').toString()

    override protected fun create(val part: Part, val iterator: Iterator<Any>): QueryCriteria  {
        val path = context.getPersistentPropertyPath(part.property)
        val property = path.leafProperty
        return from(part, property, QueryCriteria.where(addMetaIfIdProperty(path, property)), iterator)
    }

    override protected fun and(part: Part, base: QueryCriteria?, iterator: Iterator<Any>): QueryCriteria {
        if (base == null) {
            return create(part, iterator)
        }
        val path = context.getPersistentPropertyPath(part.property)
        val property = path.leafProperty
        return from(part, property, base.and(addMetaIfIdProperty(path, property)), iterator)
    }

    private fun addMetaIfIdProperty(
        val path: PersistentPropertyPath<CouchbasePersistentProperty>,
        val property: CouchbasePersistentProperty
    ) = path.toDotPath(cvtr)

    override protected fun or(base: QueryCriteria, criteria: QueryCriteria) = base.or(criteria)

    override protected fun complete(criteria: QueryCriteria, sort: Sort) {
        return (criteria == null ? Query() : Query().addCriteria(criteria)).with(sort)
    }

    private QueryCriteria from(
        val  part: Part
        val  property: CouchbasePersistentProperty
        val  criteria: QueryCriteria
        val  parameters: Iterator<Any>
    ) {
        val type = part.type

        switch (type) {
            case GREATER_THAN:
            case AFTER:
                return criteria.gt(parameters.next())
            case GREATER_THAN_EQUAL:
                return criteria.gte(parameters.next())
            case LESS_THAN:
            case BEFORE:
                return criteria.lt(parameters.next())
            case LESS_THAN_EQUAL:
                return criteria.lte(parameters.next())
            case SIMPLE_PROPERTY:
                return criteria.eq(parameters.next())
            case NEGATING_SIMPLE_PROPERTY:
                return criteria.ne(parameters.next())
            case CONTAINING:
                return criteria.containing(parameters.next())
            case NOT_CONTAINING:
                return criteria.notContaining(parameters.next())
            case STARTING_WITH:
                return criteria.startingWith(parameters.next())
            case ENDING_WITH:
                return criteria.endingWith(parameters.next())
            case LIKE:
                return criteria.like(parameters.next())
            case NOT_LIKE:
                return criteria.notLike(parameters.next())
            case WITHIN:
                return criteria.within(parameters.next())
            case IS_NULL:
                return criteria.isNull()
            case IS_NOT_NULL:
                return criteria.isNotNull()
            case IS_EMPTY:
                return criteria.isNotValued()
            case IS_NOT_EMPTY:
                return criteria.isValued()
            case EXISTS:
                return criteria.isNotMissing()
            case REGEX:
                return criteria.regex(parameters.next())
            case BETWEEN:
                return criteria.between(parameters.next(), parameters.next())
            case IN:
                return criteria.in(parameters.next())
            case NOT_IN:
                return criteria.notIn(parameters.next())
            case TRUE:
                return criteria.TRUE()
            case FALSE:
                return criteria.FALSE()
            default:
                throw IllegalArgumentException("Unsupported keyword!")
        }
    }
}
