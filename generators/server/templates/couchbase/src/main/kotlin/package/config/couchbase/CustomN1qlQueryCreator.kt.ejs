<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config.couchbase


import org.springframework.core.convert.converter.Converter
import org.springframework.data.couchbase.core.CouchbaseOperations
import org.springframework.data.couchbase.core.convert.CouchbaseConverter
import org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty
import org.springframework.data.couchbase.core.query.Query
import org.springframework.data.couchbase.core.query.QueryCriteria
import org.springframework.data.domain.Sort
import org.springframework.data.mapping.PersistentPropertyPath
import org.springframework.data.repository.query.ParameterAccessor
import org.springframework.data.repository.query.QueryMethod
import org.springframework.data.repository.query.parser.AbstractQueryCreator
import org.springframework.data.repository.query.parser.Part
import org.springframework.data.repository.query.parser.PartTree

open class CustomN1qlQueryCreator(
    private val operations: CouchbaseOperations,
    tree: PartTree,
    accessor: ParameterAccessor,
    private val queryMethod: QueryMethod,
    converter: CouchbaseConverter
) : AbstractQueryCreator<Query, QueryCriteria>(tree, accessor) {

    val context = converter.mappingContext

    var cvtr: Converter<in CouchbasePersistentProperty, String> =
        Converter { source: CouchbasePersistentProperty ->
            StringBuilder(
                source.fieldName.length + 2
            ).append('`').append(source.fieldName).append('`').toString()
        }

    override fun create(part: Part, iterator: Iterator<Any>): QueryCriteria {
        val path = context.getPersistentPropertyPath(part.property)
        val property = path.leafProperty
        return from(part, property, QueryCriteria.where(addMetaIfIdProperty(path, property)), iterator)
    }

    override fun and(part: Part, base: QueryCriteria?, iterator: Iterator<Any>): QueryCriteria {
        if (base == null) {
            return create(part, iterator)
        }
        val path = context.getPersistentPropertyPath(part.property)
        val property = path.leafProperty
        return from(part, property, base.and(addMetaIfIdProperty(path, property)), iterator)
    }

    private fun addMetaIfIdProperty(
        path: PersistentPropertyPath<CouchbasePersistentProperty>,
        property: CouchbasePersistentProperty
    ) = path.toDotPath(cvtr)

    override fun or(base: QueryCriteria, criteria: QueryCriteria) = base.or(criteria)

    override fun complete(criteria: QueryCriteria?, sort: Sort) =
        (if (criteria == null) Query() else Query().addCriteria(criteria)).with(sort)

    private fun from(
        part: Part,
        property: CouchbasePersistentProperty,
        criteria: QueryCriteria,
        parameters: Iterator<Any>
    ): QueryCriteria {
        return when (part.type) {
            Part.Type.GREATER_THAN, Part.Type.AFTER -> criteria.gt(parameters.next())
            Part.Type.GREATER_THAN_EQUAL -> criteria.gte(parameters.next())
            Part.Type.LESS_THAN, Part.Type.BEFORE -> criteria.lt(parameters.next())
            Part.Type.LESS_THAN_EQUAL -> criteria.lte(parameters.next())
            Part.Type.SIMPLE_PROPERTY -> criteria.eq(parameters.next())
            Part.Type.NEGATING_SIMPLE_PROPERTY -> criteria.ne(parameters.next())
            Part.Type.CONTAINING -> criteria.containing(parameters.next())
            Part.Type.NOT_CONTAINING -> criteria.notContaining(parameters.next())
            Part.Type.STARTING_WITH -> criteria.startingWith(parameters.next())
            Part.Type.ENDING_WITH -> criteria.endingWith(parameters.next())
            Part.Type.LIKE -> criteria.like(parameters.next())
            Part.Type.NOT_LIKE -> criteria.notLike(parameters.next())
            Part.Type.WITHIN -> criteria.within(parameters.next())
            Part.Type.IS_NULL -> criteria.isNull
            Part.Type.IS_NOT_NULL -> criteria.isNotNull
            Part.Type.IS_EMPTY -> criteria.isNotValued
            Part.Type.IS_NOT_EMPTY -> criteria.isValued
            Part.Type.EXISTS -> criteria.isNotMissing
            Part.Type.REGEX -> criteria.regex(parameters.next())
            Part.Type.BETWEEN -> criteria.between(parameters.next(), parameters.next())
            Part.Type.IN -> criteria.`in`(parameters.next())
            Part.Type.NOT_IN -> criteria.notIn(parameters.next())
            Part.Type.TRUE -> criteria.TRUE()
            Part.Type.FALSE -> criteria.FALSE()
            else -> throw IllegalArgumentException("Unsupported keyword!")
        }
    }
}